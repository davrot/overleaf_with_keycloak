--- openid/services/web/app/src/Features/Authentication/AuthenticationController.js	2024-12-05 15:27:44.215830843 +0000
+++ /docker/compose/overleafserver/data/to_mod/openid/AuthenticationController.js	2024-12-05 16:52:38.218887186 +0000
@@ -9,8 +9,6 @@
 const Settings = require('@overleaf/settings')
 const basicAuth = require('basic-auth')
 const tsscmp = require('tsscmp')
-const {User} = require("../../models/User");
-const UserCreator = require("../User/UserCreator");
 const UserHandler = require('../User/UserHandler')
 const UserSessionsManager = require('../User/UserSessionsManager')
 const Analytics = require('../Analytics/AnalyticsManager')
@@ -597,59 +595,6 @@
       delete req.session.postLoginRedirect
     }
   },
-
-  oidcLogin(req, res, next) {
-    return passport.authenticate('openidconnect')(req, res, next)
-  },
-
-  oidcLoginCallback(req, res, next) {
-    return passport.authenticate('openidconnect',
-        {failureRedirect: '/login', failureMessage: true}, function (err, user) {
-          if (err) {
-            return next(err)
-          }
-          AuthenticationController.finishLogin(user, req, res, next)
-        }
-    )(req, res, next)
-  },
-
-  verifyOpenIDConnect(issuer, profile, callback) {
-      User.findOne({oidcUID: profile.username}, (error, user) => {
-        if (!user) {
-          UserCreator.createNewUser({
-            holdingAccount: false,
-            email: profile.emails[0].value,
-            first_name: profile.name?.givenName || "",
-            last_name: profile.name?.familyName || "",
-            oidcUID: profile.username
-          }, function (user) {
-            return callback(null, user);
-          })
-        } else {
-          user.first_name = profile.name?.givenName || "";
-          user.last_name = profile.name?.familyName || "";
-          user.oidcUID = profile.username;
-          if (user.email != profile.emails[0].value) {
-            user.email = profile.emails[0].value;
-
-            const reversedHostname = user.email.split('@')[1].split('').reverse().join('')
-            const emailData = {
-              email: user.email,
-              createdAt: new Date(),
-              reversedHostname,
-            }
-            user.emails = [emailData]
-          }
-
-          user.save(function (error) {
-            if (error) {
-              return callback(error);
-            }
-            return callback(null, user);
-          })
-          }
-      })
-    }
 }
 
 function _afterLoginSessionSetup(req, user, callback) {
